-- ========================================
-- –°–¢–í–û–†–ï–ù–ù–Ø –¢–ê–ë–õ–ò–¶–Ü NOTIFICATIONS
-- –í–∏–∫–æ–Ω–∞–π—Ç–µ –≤ Supabase Dashboard -> SQL Editor
-- ========================================

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —Å–ø–æ–≤—ñ—â–µ–Ω—å
CREATE TABLE IF NOT EXISTS public.notifications (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    type TEXT NOT NULL CHECK (type IN ('expense', 'service', 'document', 'mileage', 'status')),
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    car_id UUID REFERENCES public.cars(id) ON DELETE CASCADE,
    read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è RLS (Row Level Security)
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ—Ç–∏–∫ –±–µ–∑–ø–µ–∫–∏
DROP POLICY IF EXISTS "Users can view their own notifications" ON public.notifications;
CREATE POLICY "Users can view their own notifications"
    ON public.notifications FOR SELECT
    USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can insert their own notifications" ON public.notifications;
CREATE POLICY "Users can insert their own notifications"
    ON public.notifications FOR INSERT
    WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update their own notifications" ON public.notifications;
CREATE POLICY "Users can update their own notifications"
    ON public.notifications FOR UPDATE
    USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can delete their own notifications" ON public.notifications;
CREATE POLICY "Users can delete their own notifications"
    ON public.notifications FOR DELETE
    USING (auth.uid() = user_id);

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
CREATE INDEX IF NOT EXISTS notifications_user_id_idx ON public.notifications(user_id);
CREATE INDEX IF NOT EXISTS notifications_car_id_idx ON public.notifications(car_id);
CREATE INDEX IF NOT EXISTS notifications_created_at_idx ON public.notifications(created_at DESC);
CREATE INDEX IF NOT EXISTS notifications_type_idx ON public.notifications(type);
CREATE INDEX IF NOT EXISTS notifications_read_idx ON public.notifications(read);

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è updated_at
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∏–≥–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
DROP TRIGGER IF EXISTS handle_notifications_updated_at ON public.notifications;
CREATE TRIGGER handle_notifications_updated_at
    BEFORE UPDATE ON public.notifications
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_updated_at();

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
CREATE OR REPLACE FUNCTION public.create_notification(
    p_user_id UUID,
    p_type TEXT,
    p_title TEXT,
    p_message TEXT,
    p_car_id UUID DEFAULT NULL
) RETURNS UUID AS $$
DECLARE
    v_notification_id UUID;
BEGIN
    INSERT INTO public.notifications (
        user_id,
        type,
        title,
        message,
        car_id
    ) VALUES (
        p_user_id,
        p_type,
        p_title,
        p_message,
        p_car_id
    ) RETURNING id INTO v_notification_id;

    RETURN v_notification_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
CREATE OR REPLACE FUNCTION public.get_unread_notifications_count()
RETURNS INTEGER AS $$
BEGIN
    RETURN (
        SELECT COUNT(*)::INTEGER
        FROM public.notifications
        WHERE user_id = auth.uid()
        AND read = FALSE
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å —è–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö
CREATE OR REPLACE FUNCTION public.mark_all_notifications_read()
RETURNS void AS $$
BEGIN
    UPDATE public.notifications
    SET read = TRUE
    WHERE user_id = auth.uid()
    AND read = FALSE;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
DO $$
BEGIN
    RAISE NOTICE '‚úÖ –¢–∞–±–ª–∏—Ü—é notifications —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!';
    RAISE NOTICE 'üìã –°—Ç–≤–æ—Ä–µ–Ω–æ:';
    RAISE NOTICE '   ‚úì –¢–∞–±–ª–∏—Ü—è notifications';
    RAISE NOTICE '   ‚úì RLS –ø–æ–ª—ñ—Ç–∏–∫–∏ –±–µ–∑–ø–µ–∫–∏';
    RAISE NOTICE '   ‚úì –Ü–Ω–¥–µ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ';
    RAISE NOTICE '   ‚úì –§—É–Ω–∫—Ü—ñ—è create_notification()';
    RAISE NOTICE '   ‚úì –§—É–Ω–∫—Ü—ñ—è get_unread_notifications_count()';
    RAISE NOTICE '   ‚úì –§—É–Ω–∫—Ü—ñ—è mark_all_notifications_read()';
    RAISE NOTICE '   ‚úì –¢—Ä–∏–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è updated_at';
    RAISE NOTICE '';
    RAISE NOTICE 'üéâ –ë–ê–ó–ê –î–ê–ù–ò–• –ü–û–í–ù–Ü–°–¢–Æ –ì–û–¢–û–í–ê!';
    RAISE NOTICE 'üöÄ –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫: npm run start';
END $$;
