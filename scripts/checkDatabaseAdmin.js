/**
 * –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–ò–í–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –ë–ê–ó–ò –î–ê–ù–ò–• (–∑ service_role)
 * –ó–∞–ø—É—Å–∫: node scripts/checkDatabaseAdmin.js
 * 
 * –£–í–ê–ì–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î service_role –∫–ª—é—á –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
 */

const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ service_role –∫–ª—é—á–µ–º
const supabaseUrl = 'https://kjnbhiyrxtdaohxssynx.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtqbmJoaXlyeHRkYW9oeHNzeW54Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NDM4MDYxNSwiZXhwIjoyMDU5OTU2NjE1fQ.U4gWBL73FqvQ2E9GERgkHbq1XrbGr-iJ_b4ylSuDN98';

const supabase = createClient(supabaseUrl, serviceRoleKey);

console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë    üîê –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–ò–í–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –ë–ê–ó–ò –î–ê–ù–ò–• (SERVICE_ROLE)                 ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

console.log(`üì° URL: ${supabaseUrl}`);
console.log(`üîë Service Role Key: ${serviceRoleKey.substring(0, 30)}...\n`);

// –í—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞)
const allTables = [
  'buyers',
  'car_documents',
  'car_expenses',
  'car_images',
  'cars',
  'categories',
  'mileage_history',
  'order_items',
  'orders',
  'ownership_history',
  'products',
  'profiles',
  'service_history',
  'status_comments',
  'team_members',
  'teams'
];

async function checkTable(tableName) {
  try {
    const { count, error } = await supabase
      .from(tableName)
      .select('*', { count: 'exact', head: true });

    if (error) {
      return { 
        exists: false, 
        error: error.message,
        count: 0,
        columns: []
      };
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const { data, error: dataError } = await supabase
      .from(tableName)
      .select('*')
      .limit(1);

    let columns = [];
    if (data && data.length > 0) {
      columns = Object.keys(data[0]);
    }

    return {
      exists: true,
      count: count || 0,
      columns: columns,
      error: null
    };
  } catch (err) {
    return {
      exists: false,
      error: err.message,
      count: 0,
      columns: []
    };
  }
}

async function main() {
  console.log('‚ïê'.repeat(100));
  console.log('üìä –ü–ï–†–ï–í–Ü–†–ö–ê –í–°–Ü–• –¢–ê–ë–õ–ò–¶–¨\n');
  
  const results = {};
  let totalRecords = 0;
  let existingTables = 0;

  console.log('‚îÄ'.repeat(100));
  console.log('–¢–∞–±–ª–∏—Ü—è'.padEnd(25) + '–°—Ç–∞—Ç—É—Å'.padEnd(15) + '–ó–∞–ø–∏—Å—ñ–≤'.padEnd(15) + '–ö–æ–ª–æ–Ω–æ–∫'.padEnd(15));
  console.log('‚îÄ'.repeat(100));

  for (const tableName of allTables) {
    const result = await checkTable(tableName);
    results[tableName] = result;

    const statusIcon = result.exists ? '‚úÖ' : '‚ùå';
    const status = result.exists ? '–î–æ—Å—Ç—É–ø–Ω–∞' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
    const count = result.exists ? result.count.toString() : '-';
    const colCount = result.exists ? result.columns.length.toString() : '-';

    console.log(
      tableName.padEnd(25) +
      `${statusIcon} ${status}`.padEnd(15) +
      count.padEnd(15) +
      colCount.padEnd(15)
    );

    if (result.exists) {
      totalRecords += result.count;
      existingTables++;
    }
  }

  console.log('‚îÄ'.repeat(100));

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log(`\nüìà –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n`);
  console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å: ${existingTables} –∑ ${allTables.length}`);
  console.log(`üìù –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: ${totalRecords}`);
  console.log(`üéØ –í—ñ–¥—Å–æ—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ: ${Math.round((existingTables / allTables.length) * 100)}%\n`);

  // –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∞–∂–ª–∏–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ
  console.log('‚ïê'.repeat(100));
  console.log('üîç –î–ï–¢–ê–õ–¨–ù–ê –°–¢–†–£–ö–¢–£–†–ê –ö–†–ò–¢–ò–ß–ù–ò–• –¢–ê–ë–õ–ò–¶–¨\n');

  const criticalTables = ['cars', 'car_expenses', 'car_documents', 'mileage_history', 'buyers'];
  
  for (const tableName of criticalTables) {
    if (results[tableName]?.exists) {
      console.log(`\nüìã –¢–∞–±–ª–∏—Ü—è: ${tableName.toUpperCase()}`);
      console.log(`   –ó–∞–ø–∏—Å—ñ–≤: ${results[tableName].count}`);
      console.log(`   –ö–æ–ª–æ–Ω–∫–∏ (${results[tableName].columns.length}):`);
      
      if (results[tableName].columns.length > 0) {
        const cols = results[tableName].columns;
        for (let i = 0; i < cols.length; i += 5) {
          const chunk = cols.slice(i, i + 5);
          console.log(`      ${chunk.join(', ')}`);
        }
      }

      // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å —è–∫ –ø—Ä–∏–∫–ª–∞–¥ (—è–∫—â–æ —î)
      if (results[tableName].count > 0) {
        const { data } = await supabase
          .from(tableName)
          .select('*')
          .limit(1);
        
        if (data && data.length > 0) {
          console.log(`   –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Å—É:`);
          console.log(`      ${JSON.stringify(data[0], null, 2).split('\n').join('\n      ')}`);
        }
      }
    } else {
      console.log(`\n‚ùå –¢–∞–±–ª–∏—Ü—è: ${tableName.toUpperCase()} - –ù–ï–î–û–°–¢–£–ü–ù–ê`);
      if (results[tableName]?.error) {
        console.log(`   –ü–æ–º–∏–ª–∫–∞: ${results[tableName].error}`);
      }
    }
  }

  // –ê–Ω–∞–ª—ñ–∑ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
  console.log('\n' + '‚ïê'.repeat(100));
  console.log('‚ö†Ô∏è  –ù–ï–ü–û–¢–†–Ü–ë–ù–Ü E-COMMERCE –¢–ê–ë–õ–ò–¶–Ü\n');

  const ecommerceTables = ['categories', 'products', 'orders', 'order_items'];
  const existingEcommerce = ecommerceTables.filter(t => results[t]?.exists);

  if (existingEcommerce.length > 0) {
    console.log('–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –¥–æ–¥–∞—Ç–∫—É –∞–≤—Ç–æ–ø–µ—Ä–µ–∫—É–ø—É:');
    existingEcommerce.forEach(table => {
      console.log(`   - ${table} (${results[table].count} –∑–∞–ø–∏—Å—ñ–≤)`);
    });
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –í–∏–¥–∞–ª–∏—Ç–∏ —Ü—ñ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è');
  } else {
    console.log('‚úÖ –ù–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤'—è–∑–∫—ñ–≤
  if (results.cars?.exists && results.cars.count > 0) {
    console.log('\n' + '‚ïê'.repeat(100));
    console.log('üîó –ü–ï–†–ï–í–Ü–†–ö–ê –ó–í\'–Ø–ó–ö–Ü–í –ú–Ü–ñ –¢–ê–ë–õ–ò–¶–Ø–ú–ò\n');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞–Ω—ñ –≤ –ø–æ–≤'—è–∑–∞–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—è—Ö
    const checks = [
      { from: 'cars', to: 'car_expenses', desc: '–ê–≤—Ç–æ ‚Üí –í–∏—Ç—Ä–∞—Ç–∏' },
      { from: 'cars', to: 'car_documents', desc: '–ê–≤—Ç–æ ‚Üí –î–æ–∫—É–º–µ–Ω—Ç–∏' },
      { from: 'cars', to: 'car_images', desc: '–ê–≤—Ç–æ ‚Üí –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è' },
      { from: 'cars', to: 'mileage_history', desc: '–ê–≤—Ç–æ ‚Üí –ü—Ä–æ–±—ñ–≥' },
      { from: 'cars', to: 'buyers', desc: '–ê–≤—Ç–æ ‚Üí –ü–æ–∫—É–ø—Ü—ñ' }
    ];

    for (const check of checks) {
      if (results[check.to]?.exists) {
        const ratio = results[check.to].count / results[check.from].count;
        const status = results[check.to].count > 0 ? '‚úÖ' : '‚ö†Ô∏è';
        console.log(`${status} ${check.desc.padEnd(25)} - ${results[check.to].count} –∑–∞–ø–∏—Å—ñ–≤ (${ratio.toFixed(2)} –Ω–∞ –∞–≤—Ç–æ)`);
      }
    }
  }

  // –í–∏—Å–Ω–æ–≤–æ–∫
  console.log('\n' + '‚ïê'.repeat(100));
  console.log('üìù –í–ò–°–ù–û–í–û–ö\n');

  const missingCritical = criticalTables.filter(t => !results[t]?.exists);
  
  if (missingCritical.length > 0) {
    console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–Ü –ü–†–û–ë–õ–ï–ú–ò:');
    console.log(`   –í—ñ–¥—Å—É—Ç–Ω—ñ –≤–∞–∂–ª–∏–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ: ${missingCritical.join(', ')}`);
  } else if (existingTables === allTables.length) {
    console.log('‚úÖ –í—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ!');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!');
    
    if (totalRecords === 0) {
      console.log('\n‚ÑπÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è. –ì–æ—Ç–æ–≤–∞ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö.');
    } else {
      console.log(`\n‚úÖ –í –±–∞–∑—ñ —î –¥–∞–Ω—ñ (${totalRecords} –∑–∞–ø–∏—Å—ñ–≤)`);
    }
  }

  console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
  console.log('‚ïë                        ‚úÖ –ü–ï–†–ï–í–Ü–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê                              ‚ïë');
  console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

  return results;
}

main()
  .then(() => {
    console.log('üí° –ù–ê–°–¢–£–ü–ù–ò–ô –ö–†–û–ö: –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ RLS –ø–æ–ª—ñ—Ç–∏–∫–∏ –¥–ª—è anon –∫–ª—é—á–∞\n');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê:', error.message);
    process.exit(1);
  });
