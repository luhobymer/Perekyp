/**
 * –î–ï–¢–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–†–£–ö–¢–£–†–ò –ë–ê–ó–ò –î–ê–ù–ò–• SUPABASE
 * –ó–∞–ø—É—Å–∫: node scripts/checkDatabaseDetailed.js
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey || supabaseKey.includes('your_supabase')) {
  console.error('‚ùå –ü–û–ú–ò–õ–ö–ê: API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!\n');
  console.error('–í—ñ–¥–∫—Ä–∏–π—Ç–µ Supabase Dashboard —ñ —Å–∫–æ–ø—ñ—é–π—Ç–µ "anon public" –∫–ª—é—á:');
  console.error(`${supabaseUrl}/project/_/settings/api\n`);
  console.error('–ü–æ—Ç—ñ–º –≤—Å—Ç–∞–≤—Ç–µ –π–æ–≥–æ –≤ .env —Ñ–∞–π–ª:\n');
  console.error('EXPO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGc...\n');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë         üîç –î–ï–¢–ê–õ–¨–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –ë–ê–ó–ò –î–ê–ù–ò–• SUPABASE                         ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

console.log(`üì° URL: ${supabaseUrl}`);
console.log(`üîë Key: ${supabaseKey.substring(0, 20)}...${supabaseKey.substring(supabaseKey.length - 5)}\n`);

// –í—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ, —â–æ —î –≤ Supabase (–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞)
const allTables = [
  // –û—Å–Ω–æ–≤–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –¥–æ–¥–∞—Ç–∫—É –∞–≤—Ç–æ–ø–µ—Ä–µ–∫—É–ø—É
  { name: 'cars', category: 'app', priority: 'critical', description: 'üöó –ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ' },
  { name: 'car_expenses', category: 'app', priority: 'critical', description: 'üí∞ –í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –∞–≤—Ç–æ' },
  { name: 'car_documents', category: 'app', priority: 'high', description: 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∏ –∞–≤—Ç–æ' },
  { name: 'car_images', category: 'app', priority: 'high', description: 'üñºÔ∏è  –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–≤—Ç–æ' },
  { name: 'mileage_history', category: 'app', priority: 'high', description: 'üìä –Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä–æ–±—ñ–≥—É' },
  { name: 'buyers', category: 'app', priority: 'high', description: 'üë§ –ü–æ–∫—É–ø—Ü—ñ' },
  { name: 'service_history', category: 'app', priority: 'medium', description: 'üîß –Ü—Å—Ç–æ—Ä—ñ—è –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è' },
  { name: 'ownership_history', category: 'app', priority: 'medium', description: 'üìã –Ü—Å—Ç–æ—Ä—ñ—è –≤–æ–ª–æ–¥—ñ–Ω–Ω—è' },
  { name: 'status_comments', category: 'app', priority: 'low', description: 'üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ —Å—Ç–∞—Ç—É—Å—É' },
  
  // –°–∏—Å—Ç–µ–º–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
  { name: 'profiles', category: 'system', priority: 'medium', description: 'üë• –ü—Ä–æ—Ñ—ñ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤' },
  { name: 'teams', category: 'system', priority: 'low', description: 'üè¢ –ö–æ–º–∞–Ω–¥–∏' },
  { name: 'team_members', category: 'system', priority: 'low', description: 'üë®‚Äçüíº –ß–ª–µ–Ω–∏ –∫–æ–º–∞–Ω–¥' },
  
  // E-commerce —Ç–∞–±–ª–∏—Ü—ñ (–Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ–∫—É–ø—É)
  { name: 'categories', category: 'ecommerce', priority: 'unused', description: 'üì¶ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó (e-commerce)' },
  { name: 'products', category: 'ecommerce', priority: 'unused', description: 'üõçÔ∏è  –¢–æ–≤–∞—Ä–∏ (e-commerce)' },
  { name: 'orders', category: 'ecommerce', priority: 'unused', description: 'üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è (e-commerce)' },
  { name: 'order_items', category: 'ecommerce', priority: 'unused', description: 'üì¶ –ï–ª–µ–º–µ–Ω—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å (e-commerce)' },
];

async function getTableInfo(tableName) {
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
    const { count, error: countError } = await supabase
      .from(tableName)
      .select('*', { count: 'exact', head: true });

    if (countError) {
      return { 
        exists: false, 
        error: countError.message,
        count: 0,
        columns: []
      };
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å)
    const { data, error: dataError } = await supabase
      .from(tableName)
      .select('*')
      .limit(1);

    let columns = [];
    if (data && data.length > 0) {
      columns = Object.keys(data[0]);
    }

    return {
      exists: true,
      count: count || 0,
      columns: columns,
      error: null
    };
  } catch (err) {
    return {
      exists: false,
      error: err.message,
      count: 0,
      columns: []
    };
  }
}

function getPriorityIcon(priority) {
  const icons = {
    'critical': 'üî¥',
    'high': 'üü†',
    'medium': 'üü°',
    'low': 'üü¢',
    'unused': '‚ö™'
  };
  return icons[priority] || '‚ö™';
}

async function checkAllTables() {
  console.log('‚ïê'.repeat(100));
  console.log('üìä –û–ì–õ–Ø–î –í–°–Ü–• –¢–ê–ë–õ–ò–¶–¨\n');
  
  const results = {};
  const categories = {
    app: [],
    system: [],
    ecommerce: []
  };

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
  for (const table of allTables) {
    process.stdout.write(`–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ${table.name}...`);
    
    const info = await getTableInfo(table.name);
    results[table.name] = { ...table, ...info };
    categories[table.category].push(results[table.name]);
    
    process.stdout.write(info.exists ? ' ‚úÖ\n' : ' ‚ùå\n');
  }

  console.log('\n' + '‚ïê'.repeat(100));
  
  // –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
  console.log('\nüöó –¢–ê–ë–õ–ò–¶–Ü –î–û–î–ê–¢–ö–£ –ê–í–¢–û–ü–ï–†–ï–ö–£–ü–£\n');
  console.log('‚îÄ'.repeat(100));
  console.log('–ù–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ'.padEnd(25) + '–°—Ç–∞—Ç—É—Å'.padEnd(15) + '–ó–∞–ø–∏—Å—ñ–≤'.padEnd(12) + '–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç'.padEnd(15) + '–û–ø–∏—Å');
  console.log('‚îÄ'.repeat(100));
  
  categories.app.forEach(table => {
    const status = table.exists ? '‚úÖ –Ü—Å–Ω—É—î' : '‚ùå –í—ñ–¥—Å—É—Ç–Ω—è';
    const count = table.exists ? table.count.toString() : '-';
    const priority = `${getPriorityIcon(table.priority)} ${table.priority}`;
    
    console.log(
      table.name.padEnd(25) +
      status.padEnd(15) +
      count.padEnd(12) +
      priority.padEnd(15) +
      table.description
    );
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤–∞–∂–ª–∏–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å
    if (table.exists && table.columns.length > 0 && ['critical', 'high'].includes(table.priority)) {
      console.log(`   ‚îî‚îÄ –ö–æ–ª–æ–Ω–∫–∏ (${table.columns.length}): ${table.columns.join(', ')}`);
    }
  });

  console.log('\n' + '‚îÄ'.repeat(100));
  console.log('\nüè¢ –°–ò–°–¢–ï–ú–ù–Ü –¢–ê–ë–õ–ò–¶–Ü\n');
  console.log('‚îÄ'.repeat(100));
  
  categories.system.forEach(table => {
    const status = table.exists ? '‚úÖ –Ü—Å–Ω—É—î' : '‚ùå –í—ñ–¥—Å—É—Ç–Ω—è';
    const count = table.exists ? table.count.toString() : '-';
    
    console.log(
      table.name.padEnd(25) +
      status.padEnd(15) +
      count.padEnd(12) +
      table.description
    );
  });

  console.log('\n' + '‚îÄ'.repeat(100));
  console.log('\nüì¶ E-COMMERCE –¢–ê–ë–õ–ò–¶–Ü (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–æ–¥–∞—Ç–∫–æ–º)\n');
  console.log('‚îÄ'.repeat(100));
  
  categories.ecommerce.forEach(table => {
    const status = table.exists ? '‚ö†Ô∏è  –Ü—Å–Ω—É—î' : '‚úÖ –í—ñ–¥—Å—É—Ç–Ω—è';
    const count = table.exists ? table.count.toString() : '-';
    
    console.log(
      table.name.padEnd(25) +
      status.padEnd(15) +
      count.padEnd(12) +
      table.description
    );
  });

  return { results, categories };
}

async function analyzeDatabase(results, categories) {
  console.log('\n' + '‚ïê'.repeat(100));
  console.log('üìà –ê–ù–ê–õ–Ü–ó –°–¢–ê–ù–£ –ë–ê–ó–ò –î–ê–ù–ò–•\n');

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const appTables = categories.app;
  const existingAppTables = appTables.filter(t => t.exists).length;
  const criticalTables = appTables.filter(t => t.priority === 'critical');
  const missingCritical = criticalTables.filter(t => !t.exists);
  const totalRecords = Object.values(results).reduce((sum, t) => sum + (t.count || 0), 0);

  console.log(`üìä –í—Å—å–æ–≥–æ —Ç–∞–±–ª–∏—Ü—å –¥–æ–¥–∞—Ç–∫—É: ${appTables.length}`);
  console.log(`‚úÖ –Ü—Å–Ω—É—é—á–∏—Ö: ${existingAppTables}`);
  console.log(`‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ—Ö: ${appTables.length - existingAppTables}`);
  console.log(`üìù –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: ${totalRecords}`);
  console.log(`üéØ –ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –ë–î: ${Math.round((existingAppTables / appTables.length) * 100)}%\n`);

  // –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏
  const issues = [];
  const warnings = [];
  const recommendations = [];

  if (missingCritical.length > 0) {
    issues.push('üî¥ –ö–†–ò–¢–ò–ß–ù–û: –í—ñ–¥—Å—É—Ç–Ω—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ:');
    missingCritical.forEach(t => {
      issues.push(`   - ${t.name}: ${t.description}`);
    });
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ cars
  if (results.cars?.exists) {
    const requiredColumns = ['id', 'user_id', 'brand', 'model', 'year', 'status', 'mileage'];
    const missingColumns = requiredColumns.filter(col => !results.cars.columns.includes(col));
    
    if (missingColumns.length > 0) {
      warnings.push(`‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è CARS: –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤–∞–∂–ª–∏–≤—ñ –∫–æ–ª–æ–Ω–∫–∏: ${missingColumns.join(', ')}`);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è CARS –º–∞—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è');
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ car_expenses
  if (results.car_expenses?.exists) {
    const requiredColumns = ['id', 'car_id', 'amount', 'expense_type', 'date'];
    const missingColumns = requiredColumns.filter(col => !results.car_expenses.columns.includes(col));
    
    if (missingColumns.length > 0) {
      warnings.push(`‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è CAR_EXPENSES: –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤–∞–∂–ª–∏–≤—ñ –∫–æ–ª–æ–Ω–∫–∏: ${missingColumns.join(', ')}`);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è CAR_EXPENSES –º–∞—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è');
    }
  }

  // E-commerce —Ç–∞–±–ª–∏—Ü—ñ
  const unusedTables = categories.ecommerce.filter(t => t.exists);
  if (unusedTables.length > 0) {
    recommendations.push(`üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω—ñ e-commerce —Ç–∞–±–ª–∏—Ü—ñ: ${unusedTables.map(t => t.name).join(', ')}`);
    recommendations.push('   –¶—ñ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–æ–¥–∞—Ç–∫–æ–º —ñ –∑–∞–π–º–∞—é—Ç—å –º—ñ—Å—Ü–µ.');
  }

  // –í—ñ–¥—Å—É—Ç–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
  const missingHigh = appTables.filter(t => !t.exists && t.priority === 'high');
  if (missingHigh.length > 0) {
    warnings.push(`‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –≤–∞–∂–ª–∏–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ: ${missingHigh.map(t => t.name).join(', ')}`);
  }

  // –í–∏–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º
  console.log('\n' + '‚ïê'.repeat(100));
  
  if (issues.length > 0) {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ù–Ü –ü–†–û–ë–õ–ï–ú–ò:\n');
    issues.forEach(issue => console.log(issue));
  }

  if (warnings.length > 0) {
    console.log('\n‚ö†Ô∏è  –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø:\n');
    warnings.forEach(warning => console.log(warning));
  }

  if (recommendations.length > 0) {
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:\n');
    recommendations.forEach(rec => console.log(rec));
  }

  if (issues.length === 0 && warnings.length === 0) {
    console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≤ —á—É–¥–æ–≤–æ–º—É —Å—Ç–∞–Ω—ñ!');
  }

  return {
    hasIssues: issues.length > 0,
    hasWarnings: warnings.length > 0,
    readiness: Math.round((existingAppTables / appTables.length) * 100)
  };
}

async function checkDataConsistency(results) {
  console.log('\n' + '‚ïê'.repeat(100));
  console.log('üîó –ü–ï–†–ï–í–Ü–†–ö–ê –ó–í\'–Ø–ó–ö–Ü–í –ú–Ü–ñ –¢–ê–ë–õ–ò–¶–Ø–ú–ò\n');

  if (!results.cars?.exists) {
    console.log('‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–≤\'—è–∑–∫–∏ - —Ç–∞–±–ª–∏—Ü—è CARS –≤—ñ–¥—Å—É—Ç–Ω—è\n');
    return;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–≤'—è–∑–∫–∏
  const checks = [];

  // cars -> car_expenses
  if (results.car_expenses?.exists && results.cars.count > 0) {
    const { count } = await supabase
      .from('car_expenses')
      .select('*', { count: 'exact', head: true });
    
    checks.push({
      name: 'Cars ‚Üí Expenses',
      status: count > 0 ? '‚úÖ' : '‚ö†Ô∏è',
      info: `${results.cars.count} –∞–≤—Ç–æ, ${count} –≤–∏—Ç—Ä–∞—Ç`
    });
  }

  // cars -> mileage_history
  if (results.mileage_history?.exists && results.cars.count > 0) {
    const { count } = await supabase
      .from('mileage_history')
      .select('*', { count: 'exact', head: true });
    
    checks.push({
      name: 'Cars ‚Üí Mileage',
      status: count > 0 ? '‚úÖ' : '‚ö†Ô∏è',
      info: `${results.cars.count} –∞–≤—Ç–æ, ${count} –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ–±—ñ–≥—É`
    });
  }

  // cars -> car_documents
  if (results.car_documents?.exists && results.cars.count > 0) {
    const { count } = await supabase
      .from('car_documents')
      .select('*', { count: 'exact', head: true });
    
    checks.push({
      name: 'Cars ‚Üí Documents',
      status: count > 0 ? '‚úÖ' : '‚ö†Ô∏è',
      info: `${results.cars.count} –∞–≤—Ç–æ, ${count} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤`
    });
  }

  checks.forEach(check => {
    console.log(`${check.status} ${check.name.padEnd(25)} - ${check.info}`);
  });
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  try {
    const { results, categories } = await checkAllTables();
    const analysis = await analyzeDatabase(results, categories);
    await checkDataConsistency(results);

    console.log('\n' + '‚ïê'.repeat(100));
    console.log('\nüìù –î–ï–¢–ê–õ–¨–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –í SUPABASE DASHBOARD:');
    console.log(`   ${supabaseUrl.replace('/rest/v1', '')}/project/_/editor\n`);

    console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë                        ‚úÖ –ü–ï–†–ï–í–Ü–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê                              ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

    // –í–∏—Å–Ω–æ–≤–æ–∫
    if (analysis.hasIssues) {
      console.log('‚ùå –Ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏! –î–æ–¥–∞—Ç–æ–∫ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ.\n');
      process.exit(1);
    } else if (analysis.readiness < 80) {
      console.log(`‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–ø–æ–≤–Ω–∞ (${analysis.readiness}%). –î–µ—è–∫–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –º–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.\n`);
      process.exit(0);
    } else {
      console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏ (${analysis.readiness}%)!\n`);
      process.exit(0);
    }

  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê:', error.message);
    console.error('\n–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:');
    console.error('1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π EXPO_PUBLIC_SUPABASE_URL');
    console.error('2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π EXPO_PUBLIC_SUPABASE_ANON_KEY');
    console.error('3. –ü—Ä–æ–µ–∫—Ç Supabase –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π');
    console.error('4. –ù–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑\'—î–¥–Ω–∞–Ω–Ω—è\n');
    process.exit(1);
  }
}

main();
