/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ –∑ –∞–ª—ñ–∞—Å–∞–º–∏ @/ —É –ø—Ä–æ–µ–∫—Ç—ñ
 * 
 * –¶–µ–π —Å–∫—Ä–∏–ø—Ç –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ —Ñ–∞–π–ª–∏ TypeScript/JavaScript —É –ø—Ä–æ–µ–∫—Ç—ñ,
 * —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –∞–ª—ñ–∞—Å–∏ @/ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—ñ–≤, —ñ –∑–∞–º—ñ–Ω—é—î —ó—Ö –Ω–∞ –≤—ñ–¥–Ω–æ—Å–Ω—ñ —à–ª—è—Ö–∏.
 */

const fs = require('fs');
const path = require('path');
const glob = require('glob');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥–Ω–æ—Å–Ω–æ–≥–æ —à–ª—è—Ö—É –º—ñ–∂ –¥–≤–æ–º–∞ —Ñ–∞–π–ª–∞–º–∏
function getRelativePath(fromFile, toModule) {
  // –û—Ç—Ä–∏–º—É—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –¥–æ –º–æ–¥—É–ª—è
  let modulePath = '';
  
  if (toModule.startsWith('@/src/')) {
    modulePath = path.join(process.cwd(), 'src', toModule.substring(6));
  } else if (toModule.startsWith('@/')) {
    modulePath = path.join(process.cwd(), toModule.substring(2));
  } else {
    return toModule; // –ù–µ –∑–º—ñ–Ω—é—î–º–æ —à–ª—è—Ö, —è–∫—â–æ —Ü–µ –Ω–µ –∞–ª—ñ–∞—Å
  }
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —Ñ–∞–π–ª—É, –∑ —è–∫–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É—î–º–æ
  const fromDir = path.dirname(fromFile);
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö
  let relativePath = path.relative(fromDir, modulePath);
  
  // –Ø–∫—â–æ —à–ª—è—Ö –Ω–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ './' –∞–±–æ '../', –¥–æ–¥–∞—î–º–æ './'
  if (!relativePath.startsWith('.')) {
    relativePath = './' + relativePath;
  }
  
  // –ó–∞–º—ñ–Ω—é—î–º–æ –∑–≤–æ—Ä–æ—Ç–Ω—ñ —Å–ª–µ—à—ñ –Ω–∞ –ø—Ä—è–º—ñ (–¥–ª—è Windows)
  relativePath = relativePath.replace(/\\/g, '/');
  
  return relativePath;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ —É —Ñ–∞–π–ª—ñ
function fixImportsInFile(filePath) {
  console.log(`–û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É: ${filePath}`);
  
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let modified = false;
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —ñ–º–ø–æ—Ä—Ç–∏ –∑ –∞–ª—ñ–∞—Å–∞–º–∏ @/
    const importRegex = /import\s+(?:(?:{[^}]*})|(?:[\w*]+))\s+from\s+['"](@\/[^'"]+)['"]/g;
    const requireRegex = /(?:const|let|var)\s+(?:(?:{[^}]*})|(?:[\w*]+))\s+=\s+require\s*\(\s*['"](@\/[^'"]+)['"]\s*\)/g;
    
    // –ó–∞–º—ñ–Ω—é—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏ –∑ –∞–ª—ñ–∞—Å–∞–º–∏ @/ –Ω–∞ –≤—ñ–¥–Ω–æ—Å–Ω—ñ —à–ª—è—Ö–∏
    content = content.replace(importRegex, (match, importPath) => {
      const relativePath = getRelativePath(filePath, importPath);
      modified = true;
      return match.replace(importPath, relativePath);
    });
    
    // –ó–∞–º—ñ–Ω—é—î–º–æ require –∑ –∞–ª—ñ–∞—Å–∞–º–∏ @/ –Ω–∞ –≤—ñ–¥–Ω–æ—Å–Ω—ñ —à–ª—è—Ö–∏
    content = content.replace(requireRegex, (match, importPath) => {
      const relativePath = getRelativePath(filePath, importPath);
      modified = true;
      return match.replace(importPath, relativePath);
    });
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏, —è–∫—â–æ —Ñ–∞–π–ª –±—É–≤ –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π
    if (modified) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —ñ–º–ø–æ—Ä—Ç–∏ —É —Ñ–∞–π–ª—ñ: ${filePath}`);
    }
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É ${filePath}:`, error);
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
function main() {
  console.log('üîç –ü–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤ –∑ –∞–ª—ñ–∞—Å–∞–º–∏ —ñ–º–ø–æ—Ä—Ç—ñ–≤...');
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ TypeScript/JavaScript —Ñ–∞–π–ª–∏ —É –ø—Ä–æ–µ–∫—Ç—ñ
  const files = glob.sync('**/*.{ts,tsx,js,jsx}', {
    ignore: ['node_modules/**', 'scripts/**', 'build/**', 'dist/**'],
    cwd: process.cwd(),
    absolute: true,
  });
  
  console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.`);
  
  // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ñ–∞–π–ª
  let fixedCount = 0;
  for (const file of files) {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –∞–ª—ñ–∞—Å–∏ @/
      const content = fs.readFileSync(file, 'utf8');
      if (content.includes('@/')) {
        fixImportsInFile(file);
        fixedCount++;
      }
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ñ–∞–π–ª—É ${file}:`, error);
    }
  }
  
  console.log(`\n‚ú® –ì–æ—Ç–æ–≤–æ! –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —ñ–º–ø–æ—Ä—Ç–∏ —É ${fixedCount} —Ñ–∞–π–ª–∞—Ö.`);
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
main();
