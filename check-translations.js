const fs = require('fs');
const path = require('path');

console.log('üîç –ü–ï–†–ï–í–Ü–†–ö–ê –ü–ï–†–ï–ö–õ–ê–î–Ü–í –£ –ü–†–û–ï–ö–¢–Ü\n');

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
const ukTranslations = require('./locales/uk/translation.json');
const ruTranslations = require('./locales/ru/translation.json');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–ª—é—á—ñ–≤ –∑ –æ–±'—î–∫—Ç–∞
function getAllKeys(obj, prefix = '') {
  let keys = [];
  for (const key in obj) {
    const fullKey = prefix ? `${prefix}.${key}` : key;
    if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
      keys = keys.concat(getAllKeys(obj[key], fullKey));
    } else {
      keys.push(fullKey);
    }
  }
  return keys;
}

// –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫–ª—é—á—ñ –∑ —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
const ukKeys = getAllKeys(ukTranslations);
const ruKeys = getAllKeys(ruTranslations);

console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–ï–ö–õ–ê–î–Ü–í:');
console.log(`   üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞: ${ukKeys.length} –∫–ª—é—á—ñ–≤`);
console.log(`   üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞: ${ruKeys.length} –∫–ª—é—á—ñ–≤\n`);

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –∫–ª—é—á—ñ —î –≤ –æ–±–æ—Ö –º–æ–≤–∞—Ö
const missingInRu = ukKeys.filter(key => !ruKeys.includes(key));
const missingInUk = ruKeys.filter(key => !ukKeys.includes(key));

if (missingInRu.length > 0) {
  console.log('‚ùå –í–Ü–î–°–£–¢–ù–Ü –í –†–û–°–Ü–ô–°–¨–ö–Ü–ô:');
  missingInRu.forEach(key => console.log(`   - ${key}`));
  console.log('');
}

if (missingInUk.length > 0) {
  console.log('‚ùå –í–Ü–î–°–£–¢–ù–Ü –í –£–ö–†–ê–á–ù–°–¨–ö–Ü–ô:');
  missingInUk.forEach(key => console.log(`   - ${key}`));
  console.log('');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è t() —É –∫–æ–¥—ñ
function findTranslationKeys(dir, keys = new Set()) {
  const files = fs.readdirSync(dir);
  
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      if (file !== 'node_modules' && file !== '.git' && file !== '.expo') {
        findTranslationKeys(filePath, keys);
      }
    } else if (file.match(/\.(tsx?|jsx?)$/)) {
      const content = fs.readFileSync(filePath, 'utf-8');
      
      // –®—É–∫–∞—î–º–æ –≤—Å—ñ –≤–∏–∫–ª–∏–∫–∏ t('key')
      const regex = /t\(['"`]([^'"`]+)['"`]\)/g;
      let match;
      
      while ((match = regex.exec(content)) !== null) {
        keys.add(match[1]);
      }
    }
  });
  
  return keys;
}

console.log('üîç –®–£–ö–ê–Æ –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –ü–ï–†–ï–ö–õ–ê–î–Ü–í –£ –ö–û–î–Ü...\n');

const usedKeys = findTranslationKeys('./');
const usedKeysArray = Array.from(usedKeys);

console.log(`üìù –ó–ù–ê–ô–î–ï–ù–û ${usedKeysArray.length} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—é—á—ñ–≤ —É –∫–æ–¥—ñ\n`);

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –∫–ª—é—á—ñ —î –≤ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—Ö
const missingKeys = usedKeysArray.filter(key => !ukKeys.includes(key));

if (missingKeys.length > 0) {
  console.log('‚ùå –ö–õ–Æ–ß–Ü –í–ò–ö–û–†–ò–°–¢–ê–ù–Ü –í –ö–û–î–Ü, –ê–õ–ï –í–Ü–î–°–£–¢–ù–Ü –í –ü–ï–†–ï–ö–õ–ê–î–ê–•:');
  console.log('   (–¶—ñ –∫–ª—é—á—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –≤ translation.json)\n');
  
  // –ì—Ä—É–ø—É—î–º–æ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
  const grouped = {};
  missingKeys.forEach(key => {
    const category = key.split('.')[0];
    if (!grouped[category]) {
      grouped[category] = [];
    }
    grouped[category].push(key);
  });
  
  Object.entries(grouped).sort().forEach(([category, keys]) => {
    console.log(`   üìÅ ${category}:`);
    keys.forEach(key => console.log(`      - ${key}`));
    console.log('');
  });
} else {
  console.log('‚úÖ –í–°–Ü –í–ò–ö–û–†–ò–°–¢–ê–ù–Ü –ö–õ–Æ–ß–Ü –ü–†–ò–°–£–¢–ù–Ü –í –ü–ï–†–ï–ö–õ–ê–î–ê–•!\n');
}

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –∫–ª—é—á—ñ
const unusedKeys = ukKeys.filter(key => !usedKeysArray.includes(key));

if (unusedKeys.length > 0) {
  console.log(`‚ÑπÔ∏è  –ù–ï–í–ò–ö–û–†–ò–°–¢–ê–ù–Ü –ö–õ–Æ–ß–Ü –í –ü–ï–†–ï–ö–õ–ê–î–ê–• (${unusedKeys.length}):`);
  console.log('   (–ú–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è)\n');
  
  const grouped = {};
  unusedKeys.forEach(key => {
    const category = key.split('.')[0];
    if (!grouped[category]) {
      grouped[category] = [];
    }
    grouped[category].push(key);
  });
  
  Object.entries(grouped).sort().forEach(([category, keys]) => {
    console.log(`   üìÅ ${category}: ${keys.length} –∫–ª—é—á—ñ–≤`);
  });
  console.log('');
}

// –ü—ñ–¥—Å—É–º–æ–∫
console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
console.log('üìã –ü–Ü–î–°–£–ú–û–ö:');
console.log(`   ‚úÖ –í—Å—å–æ–≥–æ –∫–ª—é—á—ñ–≤ –≤ UK: ${ukKeys.length}`);
console.log(`   ‚úÖ –í—Å—å–æ–≥–æ –∫–ª—é—á—ñ–≤ –≤ RU: ${ruKeys.length}`);
console.log(`   üìù –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –≤ –∫–æ–¥—ñ: ${usedKeysArray.length}`);
console.log(`   ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏: ${missingKeys.length}`);
console.log(`   ‚ö†Ô∏è  –ù–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ: ${unusedKeys.length}`);
console.log(`   ${missingInRu.length > 0 ? '‚ùå' : '‚úÖ'} –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ RU: ${missingInRu.length}`);
console.log(`   ${missingInUk.length > 0 ? '‚ùå' : '‚úÖ'} –ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ UK: ${missingInUk.length}\n`);

if (missingKeys.length === 0 && missingInRu.length === 0 && missingInUk.length === 0) {
  console.log('üéâ –ü–ï–†–ï–ö–õ–ê–î–ò –í –Ü–î–ï–ê–õ–¨–ù–û–ú–£ –°–¢–ê–ù–Ü!\n');
} else {
  console.log('‚ö†Ô∏è  –ü–û–¢–†–Ü–ë–ù–û –í–ò–ü–†–ê–í–ò–¢–ò –ü–ï–†–ï–ö–õ–ê–î–ò\n');
}
